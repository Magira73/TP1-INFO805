/* package et imports */
package fr.usmb.m1isc.compilation.simple;
import java_cup.runtime.Symbol;

// nom de la classe a generer
class SimpleParser;

/* inclusion du code */

action code {:
    // pour utilisation dans les actions (classe action)
    private boolean erreur = false;
:};


parser code {:
    // pour le parser (redefinition de la methode reportant les erreurs d'analyse)
    public void report_error(String message, Object info) {
        String m = "";
        if (info instanceof java_cup.runtime.Symbol) {
            Symbol s = ((Symbol) info);
            if (s.left >= 0) {
                /* Ajoute le numero de ligne  */
                m = m + "Ligne " + (s.left+1) + " ";
            }
            if (s.right >= 0) {
                /* Ajoute le numero de colonne  */
                m = m + "Colonne " + (s.right+1) + " ";
            }
            if (s.left >=0  || s.right >= 0) {
                m = m + ": ";
            }
        }
        m = m + "Erreur de syntaxe";
        System.out.println(m);
    }
:};

 init with {:
    //    initialisation du parser
:};

/* symboles terminaux */

terminal PLUS, MOINS, MULT, DIV, PAR_G, PAR_D, MOD, ERR, FIN;
terminal Integer ENTIER;

terminal LET, EGAL;
terminal String VAR;

/* symboles non terminaux */

non terminal Integer expr;
non terminal liste_expr;

non terminal Integer variable;

/* Precedences */
precedence left PLUS, MOINS;
precedence left MULT, DIVIDE;

/* grammaire */

liste_expr	::= expr liste_expr
			  | expr  ;

variable ::= LET VAR:name EGAL expr:e 	{: vars.put(name,e); RESULT = e; :};

expr ::=
    expr:e1 PLUS expr:e2 FIN
        {: RESULT=new Integer(e1.intValue()+e2.intValue()); :} |
    expr:e1 MOINS expr:e2 FIN
        {: RESULT=new Integer(e1.intValue()-e2.intValue()); :} |
    expr:e1 MULT expr:e2 FIN
        {: RESULT=new Integer(e1.intValue()*e2.intValue()); :} |
    expr:e1 DIV expr:e2 FIN
        {: if(e2 == 0) { erreur = true; RESULT = 0; System.out.println("division par 0"); }
            else {RESULT=new Integer(e1.intValue()/e2.intValue());}; :} |
    expr:e1 MOD expr:e2 FIN
     	{: if(e2 == 0) { erreur = true; RESULT = 0; System.out.println("division par 0"); }
            else {RESULT=new Integer(e1.intValue()%e2.intValue());}; :} |
    ENTIER:n {: RESULT=n; :} |
    	PAR_G expr:e PAR_D PV {: RESULT=e; :} |
    IDENT:x  {: if(vars.get(x)!=null) { RESULT = vars.get(x); }
                 else { erreur = true; RESULT = 0; System.out.println("Variable non init"); } :}
    ERR {: erreur = true; :}
    ;

